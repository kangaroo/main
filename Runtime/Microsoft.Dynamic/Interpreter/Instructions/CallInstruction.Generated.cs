/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Apache License, Version 2.0. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Apache License, Version 2.0, please send an email to 
 * ironpy@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Apache License, Version 2.0.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/
#if !CLR2
using System.Linq.Expressions;
#else
using Microsoft.Scripting.Ast;
#endif

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Threading;
using Microsoft.Scripting.Utils;
using Microsoft.Scripting.Generation;
using Microsoft.Scripting.Runtime;

using System.Dynamic;

namespace Microsoft.Scripting.Interpreter {
    #region Generated Reflected Caller

    // *** BEGIN GENERATED CODE ***
    // generated by function: gen_all from: generate_reflected_calls.py

    public partial class CallInstruction {
        private const int MaxHelpers = 0;
        private const int MaxArgs = 0;

        public virtual object InvokeInstance(object instance, params object[] args) {
            switch(args.Length) {
                default: throw new InvalidOperationException();
            }
        }

        public virtual object Invoke(object args) {
            throw new InvalidOperationException();
        }

        public virtual object Invoke(params object[] args) {
            switch(args.Length) {
                default: throw new InvalidOperationException();
            }
        }


        /// <summary>
        /// Fast creation works if we have a known primitive types for the entire
        /// method siganture.  If we have any non-primitive types then FastCreate
        /// falls back to SlowCreate which works for all types.
        /// 
        /// Fast creation is fast because it avoids using reflection (MakeGenericType
        /// and Activator.CreateInstance) to create the types.  It does this through
        /// calling a series of generic methods picking up each strong type of the
        /// signature along the way.  When it runs out of types it news up the 
        /// appropriate CallInstruction with the strong-types that have been built up.
        /// 
        /// One relaxation is that for return types which are non-primitive types
        /// we can fallback to object due to relaxed delegates.
        /// </summary>
        private static Type GetHelperType(MethodInfo info, Type[] arrTypes) {
            Type t;
            if (info.ReturnType == typeof(void)) {
                switch (arrTypes.Length) {
                    default: throw new InvalidOperationException();
                }
            } else {
                switch (arrTypes.Length) {
                    default: throw new InvalidOperationException();
                }
            }
            return t;
        }
    }

    internal sealed partial class MethodInfoCallInstruction : CallInstruction {
    }

    // *** END GENERATED CODE ***

    #endregion
}
